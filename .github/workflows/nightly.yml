name: Nightly

on:
  schedule:
    - cron:  '0 0 * * *'

  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       versions:
         - IMAGE: mmusenbr/wiremock:nightly
           CONTEXT: .
           PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
         - IMAGE: mmusenbr/wiremock:nightly-alpine
           CONTEXT: alpine
           PLATFORMS: linux/amd64
    steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.versions.CONTEXT != 'alpine' }}
      with:
        image: tonistiigi/binfmt:latest
        platforms: all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Checkout sources
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Update version if newer
      run: |
        # Replace version in Dockerfiles if newer version exists
        CURRENT_VERSION=$(git describe --abbrev=0 --tags)
        CURRENT_VERSION=${CURRENT_VERSION%-*}
        LATEST_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/wiremock/wiremock.git '*.*.*' | tail -1 | cut -d '/' -f3)
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]
        then
          sed -i s/${CURRENT_VERSION}/${LATEST_VERSION}/g Dockerfile alpine/Dockerfile
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: mmusenbr
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build Wiremock Docker image
      run: docker buildx build --tag ${{ matrix.versions.IMAGE }} --load ${{ matrix.versions.CONTEXT }}

    - name: Test Wiremock Docker image
      run: |
        # default
        docker container run -d --name test -p 8080:8080 ${{ matrix.versions.IMAGE }}
        timeout 10 bash -c 'while ! curl --fail http://localhost:8080/__admin/; do sleep 1; done'
        docker container rm -f test

        # args
        docker container run -d --name test -p 8443:8443 ${{ matrix.versions.IMAGE }} --https-port 8443
        timeout 10 bash -c 'while ! curl --fail --insecure https://localhost:8443/__admin/; do sleep 1; done'
        docker container rm -f test

        if [ "${{ matrix.versions.CONTEXT }}" != "alpine" ]
        then
          # helloworld
          docker buildx build --tag wiremock-hello --load samples/hello
          docker container run -d --name test -p 8080:8080 wiremock-hello
          timeout 10 bash -c 'while ! curl --fail http://localhost:8080/hello; do sleep 1; done'
          docker container rm -f test

          # random
          docker buildx build --tag wiremock-random --load samples/random
          docker container run -d --name test -p 8080:8080 wiremock-random
          timeout 10 bash -c 'while ! curl --fail http://localhost:8080/random; do sleep 1; done'
          docker container rm -f test
        fi

    - name: Push Wiremock Docker image to Docker HUB
      run: docker buildx build --tag ${{ matrix.versions.IMAGE }} --platform ${{ matrix.versions.PLATFORMS }} --push ${{ matrix.versions.CONTEXT }}

  check-new-version:
    runs-on: ubuntu-latest
    needs: [ci]
    outputs:
      new_version: ${{ steps.new_version.outputs.NEW_VERSION }}
    steps:

    - name: Release if newer version
      run: |
        CURRENT_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/mmusenbr/wiremock-docker.git '*.*.*' | tail -1 | cut -d '/' -f3)
        CURRENT_VERSION=${CURRENT_VERSION%-*}
        LATEST_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/wiremock/wiremock.git '*.*.*' | tail -1 | cut -d '/' -f3)
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]
        then
          echo "::set-output name=NEW_VERSION::$LATEST_VERSION"
        fi
      id: new_version

  docker-push:
    runs-on: ubuntu-latest
    needs: [check-new-version]
    if: needs.check-new-version.outputs.new_version
    strategy:
      matrix:
       versions:
         - IMAGES:
            - mmusenbr/wiremock:latest
            - mmusenbr/wiremock:${{ needs.check-new-version.outputs.new_version }}
           CONTEXT: .
           PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
         - IMAGES:
            - mmusenbr/wiremock:latest-alpine
            - mmusenbr/wiremock:${{ needs.check-new-version.outputs.new_version }}-alpine
           CONTEXT: alpine
           PLATFORMS: linux/amd64
    steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.versions.CONTEXT != 'alpine' }}
      with:
        image: tonistiigi/binfmt:latest
        platforms: all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Checkout sources
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Update version
      run: |
        # Replace version in Dockerfiles
        CURRENT_VERSION=$(git describe --abbrev=0 --tags)
        CURRENT_VERSION=${CURRENT_VERSION%-*}
        NEW_VERSION=${{ needs.check-new-version.outputs.new_version }}
        sed -i s/${CURRENT_VERSION}/${NEW_VERSION}/g Dockerfile alpine/Dockerfile

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: mmusenbr
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Push Wiremock Docker image to Docker HUB
      run: docker buildx build --tag ${{ join(matrix.versions.IMAGES, ' --tag ') }} --platform ${{ matrix.versions.PLATFORMS }} --push ${{ matrix.versions.CONTEXT }}

  release:
    runs-on: ubuntu-latest
    needs: [docker-push, check-new-version]
    steps:

    - name: Checkout sources
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Update version
      run: |
        # Replace version in readme.md
        LAST_VERSION=$(git describe --tag --abbrev=0)
        LAST_MINOR_VERSION=${LAST_VERSION%.*}
        NEW_VERSION=${{ needs.check-new-version.outputs.new_version }}
        NEW_MINOR_VERSION=${NEW_VERSION%.*}
        sed -i s/${LAST_VERSION}/${NEW_VERSION}/g readme.md
        sed -i s/${LAST_MINOR_VERSION}/${NEW_MINOR_VERSION}/g readme.md

        # Replace version in Dockerfiles
        LAST_VERSION=${LAST_VERSION%-*}
        sed -i s/${LAST_VERSION}/${NEW_VERSION}/g Dockerfile alpine/Dockerfile

        # Push update
        git config --local user.name "Michael Musenbrock"
        git config --local user.email "michael.musenbrock@gmail.com"
        git add .
        git commit -m "upgrade to version $NEW_VERSION"
        git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/mmusenbr/wiremock-docker.git
        git push origin main

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-new-version.outputs.new_version }}

    # NOT WORKING BECAUSE OF https://github.com/peter-evans/dockerhub-description/issues/10
    # - name: Docker Hub Description
    #   uses: peter-evans/dockerhub-description@v2
    #   with:
    #     username: mmusenbr
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    #     repository: mmusenbr/wiremock
    #     short-description: Official images for the WireMock standalone server
    #     readme-filepath: ./readme.md
